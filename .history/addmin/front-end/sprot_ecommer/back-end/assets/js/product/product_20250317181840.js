$(document).ready(function () {
    let selectedProductId = null;
    let selectedProductName = "";

    // Khi b·∫•m v√†o n√∫t "X√≥a", l·∫•y ID s·∫£n ph·∫©m v√† m·ªü popup x√°c nh·∫≠n
    $(document).on("click", ".delete-btn", function () {
        selectedProductId = $(this).data("id");
        selectedProductName = $(this).data("name");

        // Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m trong modal
        $("#deleteProductName").text(selectedProductName);

        // Hi·ªÉn th·ªã popup x√°c nh·∫≠n x√≥a
        $("#deleteModal").modal("show");
    });

    // Khi nh·∫•n "Yes" ƒë·ªÉ x√°c nh·∫≠n x√≥a
    $("#confirmDelete").click(function () {
        console.log("üóë ƒêang x√≥a s·∫£n ph·∫©m c√≥ ID:", selectedProductId);
        
        let token = localStorage.getItem("authToken");

        $.ajax({
            url: `http://localhost:8080/product/delete/${selectedProductId}`,
            method: "DELETE",
            headers: {
                "Authorization": "Bearer " + token,
                "Accept": "application/json"
            },
            success: function (response) {
                if (response.code === "200") {
                    alert(`S·∫£n ph·∫©m "${selectedProductName}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`);
                    $("#deleteModal").modal("hide");
                    fetchProducts(); // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m sau khi x√≥a
                } else {
                    alert("L·ªói khi x√≥a s·∫£n ph·∫©m!");
                }
            },
            error: function () {
                alert("C√≥ l·ªói x·∫£y ra khi x√≥a s·∫£n ph·∫©m!");
            }
        });
    });
});


class Product {
    constructor(data) {
        this.id = data.productId || null;
        this.code = data.productCode || "";
        this.name = data.productName || "";
        this.price = data.productPrice || 0;
        this.costPrice = data.productCostPrice || 0;
        this.description = data.productDescription || "Kh√¥ng c√≥ m√¥ t·∫£";
        this.isActive = data.productIsActive || false;
        this.totalSold = data.productTotalSold || 0;
        this.totalRating = data.productTotalRating || 0.0;
        this.stock = data.productStock || 0;
        this.discountPrice = data.productDiscountPrice || 0;
        this.weight = data.productWeight || 0;
        this.createdAt = data.createdAt || "";
        this.updatedAt = data.updatedAt || "";
        this.createdBy = data.createdBy || "Kh√¥ng x√°c ƒë·ªãnh";
        this.updatedBy = data.updatedBy || "Kh√¥ng x√°c ƒë·ªãnh";

        this.gender = {
            id: data.genderId || null,
            name: data.genderName || "Kh√¥ng c√≥ gi·ªõi t√≠nh"
        };

        this.brand = {
            id: data.brandId || null,
            name: data.brandName || "Kh√¥ng c√≥ th∆∞∆°ng hi·ªáu"
        };

        this.category = {
            id: data.categoryId || null,
            name: data.categoryName || "Kh√¥ng c√≥ danh m·ª•c",
            image: data.categoryImage || ""
        };

        this.variants = Array.isArray(data.productVariants) ? 
            data.productVariants.map(variant => ({
                id: variant.id || null,
                code: variant.code || "",
                price: variant.price || 0,
                costPrice: variant.costPrice || 0,
                quantity: variant.quantity || 0
            })) : [];

        this.images = Array.isArray(data.productImages) ? 
            data.productImages.map(image => ({
                id: image.id || null,
                url: image.imageUrl || "",
                isPrimary: image.isPrimary || false
            })) : [];

        this.attributes = Array.isArray(data.productAttributeValue) ? 
            data.productAttributeValue.map(attr => ({
                id: attr.attributeId || null,
                name: attr.attributeName || "",
                values: Array.isArray(attr.attributeValues) ? 
                    attr.attributeValues.map(value => value.name || "") : []
            })) : [];
    }
}

function renderPagination(totalPages, currentPage) {
    let paginationContainer = $("#pagination");
    paginationContainer.empty(); // X√≥a ph√¢n trang c≈©

    for (let i = 0; i < totalPages; i++) {
        let pageItem = $(`<li class="page-item ${i === currentPage ? "active" : ""}">
                            <a class="page-link" href="#" data-page="${i}">${i + 1}</a>
                          </li>`);
        paginationContainer.append(pageItem);
    }

    // Th√™m s·ª± ki·ªán click cho t·ª´ng s·ªë trang
    $(".page-link").click(function (event) {
        event.preventDefault(); // NgƒÉn ch·∫∑n t·∫£i l·∫°i trang
        let selectedPage = $(this).data("page");
        currentPage = selectedPage; // C·∫≠p nh·∫≠t bi·∫øn currentPage
        fetchProducts(currentPage); // G·ªçi l·∫°i API v·ªõi trang m·ªõi
    });
}
const formatCurrency = (value) => {
    return new Intl.NumberFormat('vi-VN', { minimumFractionDigits: 0 }).format(value) + ' ƒë';
};
function renderProductTable(products) {
    let tbody = $(".product-group");
    tbody.empty(); // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi th√™m m·ªõi

    products.forEach(product => {
        let mainImage = product.images.length > 0 ? product.images[0].url : "assets/images/product/default.png";

        // B·ªçc to√†n b·ªô nh√≥m trong `wrapper-row`
        let wrapperRow = `<tr class="wrapper-row" data-id="${product.id}">`;

        // D√≤ng s·∫£n ph·∫©m ch√≠nh (cha)
        wrapperRow += `
            <tr class="product-row parent-row" data-id="${product.id}">
                <td>
                    <div class="table-image">
                        <img src="${mainImage}" class="img-fluid" >
                    </div>
                </td>
                <td>${product.code}</td>
                <td>${product.name}</td>
                <td>${product.category.name}</td>
                <td>${product.stock}</td>
                <td>${formatCurrency(product.price)}</td>
                <td>${formatCurrency(product.costPrice)}</td>

                <td>
                    <ul>
                        <a href="#" data-bs-toggle="modal" data-bs-target="#productDetailModal">
                            <i class="ri-eye-line"></i>
                        </a>
                        <li><a href="#"><i class="ri-pencil-line"></i></a></li>
                        <li><a href="#" data-bs-toggle="modal" data-bs-target="#exampleModalToggle">
                            <i class="ri-delete-bin-line"></i>
                        </li>
                    </ul>
                </td>
            </tr>
        `;
        console.log(product.variants.length)
        // N·∫øu s·∫£n ph·∫©m c√≥ bi·∫øn th·ªÉ, th√™m c√°c d√≤ng con
        if (product.variants.length > 0) {
            product.variants.forEach(variant => {
                wrapperRow += `
                    <tr class="product-variants child-row" data-parent="${product.id}" style="display: none; border: 1px solid #000 !important;"}>
                        <td colspan="8" style=" border: none">
                            <div class="variant-container">
                                <table class="variant-table">
                                    <tr>
                                        <td>
                                            <div class="table-image">
                                                <img src="${mainImage}" class="img-fluid"   ">
                                            </div>
                                        </td>
                                        <td>${variant.code}</td>
                                        <td>${product.name} - ${variant.code}</td>
                                        <td>${product.category.name}</td>
                                        <td>${variant.quantity}</td>
                                        <td>${variant.price}ƒë</td>
                                        <td>${variant.costPrice}ƒë</td>
                                        <td>
                                            <ul>
                                                <a href="#" data-bs-toggle="modal" data-bs-target="#productDetailModal">
                                                    <i class="ri-eye-line"></i>
                                                </a>
                                                <li><a href="#"><i class="ri-pencil-line"></i></a></li>
                                                <li><a href="#" data-bs-toggle="modal" data-bs-target="#exampleModalToggle">
                                                    <i class="ri-delete-bin-line"></i>
                                                </li>
                                            </ul>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </td>
                    </tr>
                `;
            });
        }

        // ƒê√≥ng nh√≥m bao b·ªçc
        wrapperRow += `</tr>`;

        tbody.append(wrapperRow);
    });
}


document.addEventListener("DOMContentLoaded", function () {

    document.querySelector("tbody.product-group").addEventListener("click", function (event) {
        let clickedRow = event.target.closest(".parent-row");

        if (clickedRow) {
            console.log("üü¢ B·∫°n ƒë√£ b·∫•m v√†o s·∫£n ph·∫©m:", clickedRow);

            let productId = clickedRow.getAttribute("data-id");
            let wrapperRow = clickedRow.closest(".parent-row");                     

            let variantRows = document.querySelectorAll(`.product-variants[data-parent="${productId}"]`);
            console.log(wrapperRow)
            console.log(variantRows)
            if (variantRows.length === 0) {
                return; 
            }

            let isVisible = [...variantRows].some(row => row.style.display === "table-row");

            if (isVisible) {
                console.log("·∫®n bi·∫øn th·ªÉ...");
                variantRows.forEach(row => row.style.display = "none");
                wrapperRow.classList.remove("active-border");
                clickedRow.classList.remove("highlight-green");
            } else {
                console.log("Hi·ªÉn th·ªã bi·∫øn th·ªÉ...");
                variantRows.forEach(row => row.style.display = "table-row");
                wrapperRow.classList.add("active-border");
                clickedRow.classList.add("highlight-green"); // ‚úÖ Th√™m m√†u xanh l√°
            }
        }
    });
});

function renderPagination(totalPages, currentPage) {
    const pagination = $("#pagination");
    pagination.empty();
    
    for (let i = 0; i < totalPages; i++) {
        pagination.append(`
            <li class="page-item ${i === currentPage ? 'active' : ''}">
                <a class="page-link" href="#" onclick="fetchProducts(${i})">${i + 1}</a>
            </li>
        `);
    }
}
