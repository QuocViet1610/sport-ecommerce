document.querySelectorAll(".image-input").forEach(input => {
    input.addEventListener("change", function (event) {
        handleImageChange(event.target);
    });
});

function handleImageChange(inputElement) {
    const file = inputElement.files[0];
    const previewBox = inputElement.closest(".image-preview");
    const plusSign = previewBox.querySelector(".plus-sign");

    if (file && file.type.startsWith("image/")) {
        const reader = new FileReader();
        reader.onload = function (e) {
            previewBox.innerHTML = ""; // X√≥a d·∫•u "+"

            const img = document.createElement("img");
            img.src = e.target.result;
            img.style.display = "block";

            const removeBtn = document.createElement("button");
            removeBtn.textContent = "√ó";
            removeBtn.classList.add("remove-btn");
            removeBtn.onclick = () => {
                previewBox.innerHTML = ""; // X√≥a ·∫£nh
                const newPlusSign = document.createElement("span");
                newPlusSign.classList.add("plus-sign");
                newPlusSign.textContent = "+";

                const newInput = document.createElement("input");
                newInput.type = "file";
                newInput.classList.add("image-input");
                newInput.accept = "image/*";
                newInput.addEventListener("change", function (event) {
                    handleImageChange(event.target);
                });

                previewBox.appendChild(newPlusSign);
                previewBox.appendChild(newInput);
            };

            previewBox.appendChild(img);
            previewBox.appendChild(removeBtn);
        };
        reader.readAsDataURL(file);
    }
}

const attributeList = document.getElementById("attributeList");
const addAttributeBtn = document.getElementById("addAttributeBtn");
const popup = document.getElementById("quickSelectPopup");
const closePopup = document.getElementById("closePopup");
const confirmPopup = document.getElementById("confirmPopup");
const attributeOptions = document.getElementById("attributeOptions");
const variantList = document.getElementById("variantList");

let attributes = [];
let selectedQuickAttributes = [];

// Th√™m thu·ªôc t√≠nh m·ªõi
addAttributeBtn.addEventListener("click", () => {
    const attributeGroup = document.createElement("div");
    attributeGroup.classList.add("attribute-group");

    /*** N·ª≠a 1: N√∫t Ch·ªânh S·ª≠a & Dropdown ***/
    const selectContainer = document.createElement("div");
    selectContainer.classList.add("select-container");

    const editBtn = document.createElement("button");
    editBtn.classList.add("edit-attribute-btn");
    editBtn.textContent = "‚úèÔ∏è";
    editBtn.onclick = () => openEditPopup(select);

    const select = document.createElement("select");
    select.classList.add("attribute-dropdown", "js-example-basic-single");
    select.innerHTML = `
        <option value="" selected>Ch·ªçn thu·ªôc t√≠nh</option>
        <option value="thuoc_tinh_1">THU·ªòC T√çNH 1</option>
        <option value="thuoc_tinh_2">THU·ªòC T√çNH 2</option>
        <option value="thuoc_tinh_3">THU·ªòC T√çNH 3</option>
    `;

    selectContainer.appendChild(editBtn);
    selectContainer.appendChild(select);

    /*** N·ª≠a 2: Value Container, Quick Select & Delete ***/
    const valueContainer = document.createElement("div");
    valueContainer.classList.add("value-container");

    const quickSelectBtn = document.createElement("button");
    quickSelectBtn.classList.add("quick-select-btn");
    quickSelectBtn.textContent = "Ch·ªçn nhanh";
    quickSelectBtn.onclick = () => openQuickSelectPopup(select.value, valueContainer);

    const deleteBtn = document.createElement("button");
    deleteBtn.classList.add("delete-attribute-btn");
    deleteBtn.textContent = "üóë";
    deleteBtn.onclick = () => {
        attributeGroup.remove();
        attributes = attributes.filter(attr => attr.name !== select.value);
        updateVariants();
    };

    const actionContainer = document.createElement("div");
    actionContainer.classList.add("action-container");
    actionContainer.appendChild(valueContainer);
    actionContainer.appendChild(quickSelectBtn);
    actionContainer.appendChild(deleteBtn);

    /*** G√°n t·∫•t c·∫£ v√†o `attributeGroup` ***/
    attributeGroup.appendChild(selectContainer);
    attributeGroup.appendChild(actionContainer);
    attributeList.appendChild(attributeGroup);

    /*** K√≠ch ho·∫°t Select2 ***/
    $(document).ready(function() {
        $(select).select2();
    });
});


const values = [
    { id: 1, name: "DD" },
    { id: 2, name: "XL" },
    { id: 3, name: "L" },
    { id: 4, name: "M" },
    { id: 5, name: "S" }
];

// M·ªü popup ch·ªçn nhanh
function openQuickSelectPopup(attribute, valueContainer) {
    if (!attribute) return alert("Vui l√≤ng ch·ªçn thu·ªôc t√≠nh tr∆∞·ªõc!");

    popup.style.display = "flex";
    attributeOptions.innerHTML = "";
    selectedQuickAttributes = [];

    values.forEach(valueObj => {
        const option = document.createElement("div");
        option.classList.add("attribute-option");
        option.textContent = valueObj.name; // Ch·ªâ hi·ªÉn th·ªã t√™n

        option.onclick = () => {
            option.classList.toggle("selected");
            if (option.classList.contains("selected")) {
                selectedQuickAttributes.push(valueObj);
            } else {
                selectedQuickAttributes = selectedQuickAttributes.filter(attr => attr.id !== valueObj.id);
            }
        };

        attributeOptions.appendChild(option);
    });

    confirmPopup.onclick = () => {
        addAttributeValue(attribute, selectedQuickAttributes, valueContainer);
        popup.style.display = "none";
    };
}


// ƒê√≥ng popup khi nh·∫•n b·ªè qua
closePopup.onclick = () => {
    popup.style.display = "none";
};

// Th√™m gi√° tr·ªã thu·ªôc t√≠nh v√†o danh s√°ch
function addAttributeValue(attribute, values, valueContainer) {
    let existingAttribute = attributes.find(attr => attr.name === attribute);
    if (!existingAttribute) {
        existingAttribute = { name: attribute, values: [] };
        attributes.push(existingAttribute);
    }

    values.forEach(value => {
        if (!existingAttribute.values.includes(value)) {
            existingAttribute.values.push(value);
            createValueTag(value, existingAttribute, valueContainer);
        }
    });

    updateVariants();
}

function createValueTag(valueObj, attribute, container) {
    const tag = document.createElement("div");
    tag.classList.add("value-tag");
    tag.textContent = valueObj.name; // Ch·ªâ hi·ªÉn th·ªã t√™n, kh√¥ng hi·ªÉn th·ªã ID

    const removeBtn = document.createElement("button");
    removeBtn.textContent = "√ó";
    removeBtn.classList.add("remove-tag-btn");
    removeBtn.onclick = () => {
        tag.remove();
        attribute.values = attribute.values.filter(v => v.id !== valueObj.id);
        updateVariants();
    };

    tag.appendChild(removeBtn);
    container.appendChild(tag);
}

// C·∫≠p nh·∫≠t b·∫£ng h√†ng c√πng lo·∫°i
function updateVariants() {
    const variants = generateVariants(attributes);
    renderVariants(variants);
}

// T·∫°o t·ªï h·ª£p thu·ªôc t√≠nh (S·ª≠a l·ªói khi ch·ªâ c√≥ 1 gi√° tr·ªã thu·ªôc t√≠nh)
function generateVariants(attributes) {
    if (attributes.length === 0) return [];

    // Kh·ªüi t·∫°o danh s√°ch bi·∫øn th·ªÉ t·ª´ thu·ªôc t√≠nh ƒë·∫ßu ti√™n
    let allCombinations = attributes[0].values.length > 0 
        ? attributes[0].values.map(value => [{ id: value.id, name: value.name }]) 
        : [];

    // L·∫∑p qua t·ª´ng thu·ªôc t√≠nh ti·∫øp theo ƒë·ªÉ t·∫°o t·ªï h·ª£p
    for (let i = 1; i < attributes.length; i++) {
        const newCombinations = [];
        
        attributes[i].values.forEach(value => {
            allCombinations.forEach(existingCombo => {
                // Th√™m thu·ªôc t√≠nh m·ªõi v√†o bi·∫øn th·ªÉ c≈©
                newCombinations.push([...existingCombo, { id: value.id, name: value.name }]);
            });
        });

        // C·∫≠p nh·∫≠t danh s√°ch t·ªï h·ª£p
        allCombinations = newCombinations.length > 0 
            ? newCombinations 
            : attributes[i].values.map(value => [{ id: value.id, name: value.name }]);
    }

    return allCombinations;
}
function renderVariants(variants) {
    let variantList = document.getElementById("variantList");
    variantList.innerHTML = "";

    if (variants.length === 0) {
        variantList.innerHTML = `<tr><td colspan="6">Ch∆∞a c√≥ d·ªØ li·ªáu</td></tr>`;
        return;
    }

    variants.forEach(variant => {
        const row = document.createElement("tr");

        row.innerHTML = `
            <td>${variant.map(v => `${v.name} (ID: ${v.id})`).join(" - ")}</td>
            <td>T·ª± ƒë·ªông</td>
            <td><input type="number" value="0" class="cost-price"></td>
            <td><input type="number" value="0" class="sale-price"></td>
            <td><input type="number" value="0" class="stock-quantity"></td>
            <td><button class="remove-row-btn">üóë</button></td>
        `;

        row.querySelector(".remove-row-btn").addEventListener("click", () => {
            row.remove();
        });

        variantList.appendChild(row);
    });
}


// th√™m s·∫£n ph·∫©m 
$(document).ready(function () {
    $(".custom-btn").on("click", function (e) {
        e.preventDefault();

        // T·∫°o ƒë·ªëi t∆∞·ª£ng FormData
        let formData = new FormData();
        let description = document.querySelector(".ck-editor__editable").innerHTML;
        if (description.trim() === '<p><br data-cke-filler="true"></p>') {
            description = null;
        }    


        // L·∫•y d·ªØ li·ªáu t·ª´ form input
        let productData = {
            "name": $("#productName").val() || null,
            "categoryId": $("#category").val() ? parseInt($("#category").val()) : null,
            "price": $("#price").val() ? parseFloat($("#price").val()) : 0,
            "costPrice": $("#costPrice").val() ? parseFloat($("#costPrice").val()) : 0,
            "description": description || null,
            "isActive": $("#isActive").length ? ($("#isActive").is(":checked") ? 1 : 0) : null,
            "brandId": $("#brand").val() ? parseInt($("#brand").val()) || null : null,
            "supplierId": $("#supplier").val() ? parseInt($("#supplier").val()) : null,
            "genderId": $("#gender").val() ? parseInt($("#gender").val()) : 1,
            "totalSold": $("#totalSold").val() ? parseInt($("#totalSold").val()) : 0,
            "totalRating": $("#totalRating").val() ? parseFloat($("#totalRating").val()) : 0,
            "stock": $("#stock").val() ? parseInt($("#stock").val()) : 0,
            "discountPrice": $("#discountPrice").val() ? parseFloat($("#discountPrice").val()) : 0,
            "weight": $("#weight").val() ? parseFloat($("#weight").val()) : null,
            "attributeCreatRequests": []
        };

        


        // L·∫•y danh s√°ch thu·ªôc t√≠nh v√† gi√° tr·ªã thu·ªôc t√≠nh
        $(".attribute-group").each(function () {
            let attributeId = parseInt($(this).find(".attribute-dropdown").val());
            let attributeValues = [];
            $(this).find(".value-container .value-tag").each(function () {
                attributeValues.push(parseInt($(this).attr("data-id")));
            });

            if (attributeId && attributeValues.length > 0) {
                productData.attributeCreatRequests.push({
                    "attributeId": attributeId,
                    "attributeValueIds": attributeValues
                });
            }
        });

        // L·∫•y danh s√°ch c√°c bi·∫øn th·ªÉ s·∫£n ph·∫©m
        productData.productVariantCreateRequests = [];
        $("#variantList tr").each(function () {
            let variantAttributes = [];
            let attributesText = $(this).find("td:first").text().split(" - ");
            
            attributesText.forEach(attr => {
                let attrId = parseInt($(`.attribute-option:contains(${attr})`).attr("data-id"));
                if (!isNaN(attrId)) variantAttributes.push(attrId);
            });

            let variant = {
                "productId": 1, // Ho·∫∑c thay ƒë·ªïi n·∫øu c·∫ßn
                "price": parseFloat($(this).find(".sale-price").val()),
                "costPrice": parseFloat($(this).find(".cost-price").val()),
                "quantity": parseInt($(this).find(".stock-quantity").val()),
                "variantAttributeIds": variantAttributes
            };

            productData.productVariantCreateRequests.push(variant);
        });

        // Chuy·ªÉn d·ªØ li·ªáu s·∫£n ph·∫©m th√†nh JSON v√† th√™m v√†o formData
        formData.append("data", JSON.stringify(productData));

        // L·∫•y h√¨nh ·∫£nh t·ª´ input file (t·ªëi ƒëa 5 ·∫£nh)
        let imageInputs = document.querySelectorAll(".image-input");
        let fileCount = 0;

        imageInputs.forEach(input => {
            if (input.files.length > 0) {
                formData.append("image", input.files[0]);
                fileCount++;
            }
        });


        console.log(fileCount);
        console.log(formData);
        // AJAX g·ª≠i d·ªØ li·ªáu l√™n server
        // $.ajax({
        //     url: "https://your-api-endpoint.com/products",  // Thay b·∫±ng API backend c·ªßa b·∫°n
        //     type: "POST",
        //     data: formData,
        //     processData: false,
        //     contentType: false,
        //     success: function (response) {
        //         alert("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
        //         console.log(response);
        //     },
        //     error: function (xhr, status, error) {
        //         alert("C√≥ l·ªói x·∫£y ra: " + error);
        //         console.log(xhr.responseText);
        //     }
        // });
    });
});



$(document).ready(function() {
    let token = localStorage.getItem("authToken");

    if (!token) {
        console.error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
        return;
    }


    $('#createAttribute').on('click', function(event) {
        event.preventDefault();  

        $('#attributeModal').modal('show');  
    });
    
    var selectedBrandValue = "";
    $.ajax({
        url: "http://localhost:8080/brand", 
        type: "GET",
        contentType: "application/json",
        headers: {
            "Authorization": "Bearer " + token,
            "Accept": "application/json"
        },
        success: function(data) {

            
            if(data.code == 200) {
                var dropdownMenu = $('#myDropdownBrand');
                dropdownMenu.empty();
    
                
                // Th√™m input t√¨m ki·∫øm
                dropdownMenu.append('<li><input type="text" class="form-control" id="myInputBrand" placeholder="Search..." onkeyup="filterFunctionBrand()"></li>');
                dropdownMenu.append('<li><a class="dropdown-item" href="#" data-name="Ch·ªçn th∆∞∆°ng hi·ªáu" data-id="">Ch·ªçn th∆∞∆°ng hi·ªáu</a></li>');
                // Th√™m c√°c m·ª•c v√†o dropdown
                $.each(data.data, function(index, item) {
                    dropdownMenu.append('<li><a class="dropdown-item" href="#" data-name="' + item.name + '" data-id="' + item.id + '">' + item.name + '</a></li>');
                });
    
                // Th√™m s·ª± ki·ªán click cho c√°c m·ª•c dropdown
                $('.dropdown-item').on('click', function() {
                    event.preventDefault(); 
                    var selectedBrand = $(this).data('name');
                    selectedBrandValue = $(this).data('id'); 
                    console.log(selectedBrandValue)
                    $('#dropdownButtonBrand').text(selectedBrand); 
                });
    
            } else {
                $('#myDropdownBrand').append('<li><span>Kh√¥ng c√≥ th∆∞∆°ng hi·ªáu</span></li>');
            }
        },
        error: function(xhr, status, error) {
            let dropdown = $("#myDropdownBrand");
            dropdown.empty();
            dropdown.append('<div class="dropdown-item" disabled>Ch∆∞a c√≥ th∆∞∆°ng hi·ªáu</div>');
        }
    });

    

    // H√†m ƒë·ªÉ l∆∞u ID c·ªßa th∆∞∆°ng hi·ªáu ƒë∆∞·ª£c ch·ªçn
    function selectItem(id, name) {
        // C·∫≠p nh·∫≠t t√™n v√† ID v√†o button dropdown
        $('#dropdownButtonBrand').text(name);
        value = id; // L∆∞u ID v√†o bi·∫øn value
        console.log("Th∆∞∆°ng hi·ªáu ƒë∆∞·ª£c ch·ªçn: " + name + " (ID: " + id + ")");
    }
    
    
    


    let value = ""; 
    let valueModel = ""; 
// Khai b√°o bi·∫øn value b√™n ngo√†i AJAX
$.ajax({
    url: "http://localhost:8080/category",  
    type: "GET",
    contentType: "application/json",
    headers: {
        "Authorization": "Bearer " + token,
        "Accept": "application/json"
    },
    success: function(response) {
        // In ra to√†n b·ªô d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API ƒë·ªÉ ki·ªÉm tra
        console.log("D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API:", response);

        if(response.code == 200) {
            var categories = response.data;
            var parents = [];
            var children = {};

            // In ra danh s√°ch th·ªÉ lo·∫°i (categories) ƒë·ªÉ ki·ªÉm tra
            console.log("Danh s√°ch th·ªÉ lo·∫°i:", categories);

            // Ph√¢n lo·∫°i c√°c m·ª•c theo parentId
            categories.forEach(function(category) {
                if (category.parentId == 0) {
                    // M·ª•c ch√≠nh (parent)
                    parents.push(category);
                } else {
                    // M·ª•c con (child)
                    if (!children[category.parentId]) {
                        children[category.parentId] = [];
                    }
                    children[category.parentId].push(category);
                }
            });

            // In ra c√°c m·ª•c cha v√† m·ª•c con ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£ ph√¢n lo·∫°i
            console.log("M·ª•c cha:", parents);
            console.log("M·ª•c con:", children);

            // H√†m ƒë·ªá quy ƒë·ªÉ th√™m c√°c m·ª•c con cho m·ªói m·ª•c cha
            function addChildrenRecursively(parentId, level) {
                if (children[parentId]) {
                    children[parentId].forEach(function(child) {
                        // T·∫°o div.dropdown-item cho m·ª•c con
                        var childItem = $('<div>', {
                            class: 'dropdown-item',
                            html: '&nbsp;&nbsp;&nbsp;&nbsp;'.repeat(level) + child.name,
                            click: function() {
                                selectItem(child.id); // Khi ch·ªçn m·ª•c con, l∆∞u ID v√†o value
                                $('#dropdownButton').text(child.name);
                            }
                        });


                        $('#myDropdown').append(childItem);

                        var childItemModel = $('<div>', {
                            class: 'dropdown-item-model',
                            html: '&nbsp;&nbsp;&nbsp;&nbsp;'.repeat(level) + child.name,
                            click: function() {
                                selectItem(child.id); // Khi ch·ªçn m·ª•c con, l∆∞u ID v√†o value
                                $('#myDropdownModal').text(child.name);
                            }
                        });
                        // Th√™m m·ª•c con v√†o dropdown trong modal
                        $('#myDropdownModal').append(childItemModel);


                        addChildrenRecursively(child.id, level + 1);
                    });
                }
            }

            // Th√™m c√°c m·ª•c cha v√†o dropdown
            parents.forEach(function(parent) {
                var parentItem = $('<div>', {
                    class: 'dropdown-item',
                    text: parent.name,
                    click: function() {
                        selectItem(parent.id); // Khi ch·ªçn m·ª•c cha, l∆∞u ID v√†o value
                        $('#dropdownButton').text(parent.name);
                        console.log("Ch·ªçn th·ªÉ lo·∫°i:", parent.name); // Ki·ªÉm tra khi click
                    }   
                });

                // Th√™m m·ª•c cha v√†o dropdown ngo√†i modal
                $('#myDropdown').append(parentItem);

                // Th√™m m·ª•c cha v√†o dropdown trong modal
                $('#myDropdownModal').append(parentItem);

                // Ki·ªÉm tra c√°c m·ª•c con c·ªßa cha hi·ªán t·∫°i
                addChildrenRecursively(parent.id, 1);
            });
        } else {
            alert('L·ªói: ' + response.message);
        }
    },
    error: function(xhr, status, error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu th·ªÉ lo·∫°i:", xhr.responseText || error);
        let categoryDropdown = $("#myDropdown");
        categoryDropdown.empty();
        categoryDropdown.append('<div class="dropdown-item" disabled>Kh√¥ng th·ªÉ t·∫£i th·ªÉ lo·∫°i</div>');
    }
});


function selectItem(id) {
    value = id;
    console.log("ID th·ªÉ lo·∫°i ƒë∆∞·ª£c ch·ªçn:", value); 
}

function selectItemmModel(id) {
    valueModel = id;
    console.log("ID th·ªÉ lo·∫°i ƒë∆∞·ª£c ch·ªçn:", value); 
}
    
    document.getElementById('category-select').addEventListener('change', function() {
    const selectedValue = this.value;
    console.log('ƒê√£ ch·ªçn th·ªÉ lo·∫°i:', selectedValue);
    // C√≥ th·ªÉ x·ª≠ l√Ω th√™m logic khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt th·ªÉ lo·∫°i
});




});



